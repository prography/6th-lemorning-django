"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 2.1.5.
For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os
import json

from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Env for dev / deploy
# def get_env(setting, envs):
#     try:
#         return envs[setting]
#     except KeyError:
#         error_msg = "You SHOULD set {} environ".format(setting)
#         raise ImproperlyConfigured(error_msg)
#
# DEV_ENVS = os.path.join(BASE_DIR, "envs_dev.json")
# DEPLOY_ENVS = os.path.join(BASE_DIR, "envs.json")
#
# if os.path.exists(DEV_ENVS): # Develop Env
#     env_file = open(DEV_ENVS)
# elif os.path.exists(DEPLOY_ENVS): # Deploy Env
#     env_file = open(DEPLOY_ENVS)
# else:
#     env_file = None
#
# if env_file is None: # System environ
#     try:
#         GOOGLE_KEY = os.environ['GOOGLE_KEY']
#         GOOGLE_SECRET = os.environ['GOOGLE_SECRET']
#     except KeyError as error_msg:
#         raise ImproperlyConfigured(error_msg)
# else: # JSON env
#     envs = json.loads(env_file.read())
#     GOOGLE_KEY = get_env('GOOGLE_KEY', envs)
#     GOOGLE_SECRET = get_env('GOOGLE_SECRET', envs)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c7gj*t(_wv854yc_(k8dj7v_z69h$^mr9sc9l@$o@-jpb!taj%'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'shop',
    'cart',
    'order',
    'accounts',
    'taggit',
    #### social login 시작 ####
    'django.contrib.sites',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # provider
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.google',

    'social_django',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',
    #### social login 끝 ####
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'config.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'config.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS=[(os.path.join(BASE_DIR,'static'))]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR,'media')

LOGIN_REDIRECT_URL = '/'    # 추가

IAMPORT_KEY = '2739818036058672'

IAMPORT_SECRET = 'TlApMKbYxvYqDRvXuwyibgyMrrQaRjmKEWaqHlpeQoFufbrKI02ThBFJ2wTTPfEucPVUbl82JOwZ0YJI'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

ALLOWED_HOSTS = ['6th-lemorning-django-dev3.ap-northeast-2.elasticbeanstalk.com', '*']

TAGGIT_CASE_INSENSITIVE = True

#### 소셜 로그인 관련 시작 ####
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',    # Django 기본 유저모델
    'allauth.account.auth_backends.AuthenticationBackend',
    'social_core.backends.google.GoogleOAuth2',  # Google
    'social_core.backends.facebook.FacebookOAuth2',  # Facebook
)
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SITE_ID = 1

# SocialLogin: Google
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = GOOGLE_KEY
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = GOOGLE_SECRET
# SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email']
REST_USE_JWT = True
ACCOUNT_LOGOUT_ON_GET = True
#### 소셜 로그인 관련 끝 ####